{"version":3,"sources":["components/Navbar.js","components/Bars.js","algorithms/BubbleSort.js","algorithms/SelectionSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","App.js","index.js"],"names":["Navbar","handleLength","handleSpeed","handleAlgo","generateRandomArray","handleSort","sorting","completed","len","speed","algo","className","type","onChange","min","max","value","Math","ceil","disabled","step","onClick","Bars","blocks","compare","sorted","swap","useState","window","innerWidth","length","width","setWidth","color","useEffect","addEventListener","map","block","i","height","bg","includes","style","backgroundColor","arr","j","temp","bubbleSort","dupBlocks","slice","order","push","selectionSort","insertionSort","mergeSortHelper","l","r","mid","floor","merge","mergeSort","quickSortHelper","pivot","random","m","partition","quickSort","App","setCompleted","setSorting","setSortedIndex","randomArray","Array","from","keys","randomIndex","setBlocks","setAlgo","setLength","setSpeed","setCompare","setSwap","sortedIndex","event","Number","target","console","log","sortAccOrder","loop","setTimeout","k","index","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05810b09.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = ({\n  handleLength,\n  handleSpeed,\n  handleAlgo,\n  generateRandomArray,\n  handleSort,\n  sorting,\n  completed,\n  len,\n  speed,\n  algo,\n}) => {\n  return (\n    <nav>\n      <div className=\"nav-brand\">Sorting Visualizer</div>\n\n      <div className=\"toolbox\">\n        <div>\n          <div className=\"group speed\">\n            <label>Speed</label>\n            <input\n              type=\"range\"\n              onChange={handleSpeed}\n              min=\"1\"\n              max=\"10\"\n              value={Math.ceil(400 / speed)}\n              disabled={sorting}\n            />\n          </div>\n\n          <div className=\"group length\">\n            <label>Length</label>\n            <input\n              type=\"range\"\n              onChange={handleLength}\n              min=\"5\"\n              max={100}\n              step=\"1\"\n              disabled={sorting}\n              value={len}\n            />\n          </div>\n\n          <select onChange={handleAlgo} disabled={sorting} value={algo}>\n            <option value=\"bubbleSort\">Bubble Sort</option>\n            <option value=\"selectionSort\">Selection Sort</option>\n            <option value=\"insertionSort\">Insertion Sort</option>\n            <option value=\"mergeSort\">Merge Sort</option>\n            <option value=\"quickSort\">Quick Sort</option>\n          </select>\n        </div>\n\n        <div>\n          <button onClick={generateRandomArray} disabled={sorting}>\n            New Array\n          </button>\n          <button onClick={handleSort} disabled={sorting || completed}>\n            Sort\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from 'react'\nimport './Bars.css'\n\nconst Bars = ({ blocks, compare, sorted, swap }) => {\n  const [width, setWidth] = useState(\n    Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 5)\n  )\n  const color = blocks.length <= 50 && width > 14 ? 'black' : 'transparent'\n\n  useEffect(() => {\n    const handleResize = () => {\n      //console.log(\"resize happened\");\n      setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n  }, [blocks.length])\n  // console.log(blocks);\n  return (\n    <div className='listBlocks'>\n      {blocks.map((block, i) => {\n        const height = (block * 500) / blocks.length\n        let bg = 'turquoise'\n       // console.log(\"1\");\n// console.log(height+\"--\"+i);\n        // i th element is being compared with the other element\n        if (compare && (i === compare[0] || i === compare[1])) {\n          bg = '#ffff50'\n        }\n\n        if (swap && (i === swap[0] || i === swap[1])) {\n          bg = 'red'\n        }\n        // i th element is in sorted position\n        if (sorted && sorted.includes(i)) {\n          bg = '#4bc52e'\n        }\n\n        const style = {\n          backgroundColor: bg,\n          color: color,\n          height: height,\n          width: width,\n        }\n        return (\n          \n          <div key={i} className='block' style={style}>\n           {block}\n          </div>\n        )\n      })}\n      \n    </div>\n    \n  )\n}\n\nexport default Bars\n","const swap = (arr, i, j) => {\n  const temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n}\n\nconst bubbleSort = (blocks) => {\n  const dupBlocks = blocks.slice() // copying blocks array\n  const order = []\n\n  let i, j\n\n  for (i = 0; i < dupBlocks.length; i++) {\n    for (j = 0; j < dupBlocks.length - i - 1; j++) {\n      order.push([j, j + 1, null, null]) // Compare\n      if (dupBlocks[j] > dupBlocks[j + 1]) {\n        swap(dupBlocks, j, j + 1)\n        order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n      }\n    }\n    order.push([null, null, null, j]) // j-th element is in correct position ( Sorted )\n  }\n\n  return order\n}\n\nexport default bubbleSort\n","const swap = (arr, i, j) => {\n  const temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n}\n\nconst selectionSort = (blocks) => {\n  const dupBlocks = blocks.slice() // copying blocks array\n  const order = []\n\n  let i, j\n\n  for (i = 0; i < dupBlocks.length; i++) {\n    for (j = i + 1; j < dupBlocks.length; j++) {\n      order.push([i, j, null, null]) // Compare\n      if (dupBlocks[i] > dupBlocks[j]) {\n        swap(dupBlocks, i, j)\n        order.push([i, j, dupBlocks.slice(), null]) // Swap\n      }\n    }\n    order.push([null, null, null, i]) // i-th element is in correct position ( Sorted )\n  }\n\n  return order\n}\n\nexport default selectionSort\n","const swap = (arr, i, j) => {\n  const temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n}\n\nconst insertionSort = (blocks) => {\n  const dupBlocks = blocks.slice() // copying blocks array\n  const order = []\n\n  let i, j\n\n  for (i = 0; i < dupBlocks.length; i++) {\n    j = i - 1\n    while (j >= 0 && dupBlocks[j] > dupBlocks[j + 1]) {\n      swap(dupBlocks, j, j + 1)\n      order.push([j, j + 1, null, null]) // Compare\n      order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n      j -= 1\n    }\n  }\n\n  for (i = 0; i < dupBlocks.length; i++) {\n    order.push([null, null, null, i])\n  }\n\n  return order\n}\n\nexport default insertionSort\n","let order = []\n\nconst merge = (dupBlocks, l, mid, r) => {\n  let i = l,\n    j = mid + 1\n\n  const arr = []\n\n  while (i <= mid && j <= r) {\n    order.push([i, j, null, null]) // Compare i th and j th element\n    if (dupBlocks[i] <= dupBlocks[j]) {\n      arr.push(dupBlocks[i++])\n    } else {\n      arr.push(dupBlocks[j++])\n    }\n  }\n\n  while (i <= mid) {\n    order.push([i, null, null, null])\n    arr.push(dupBlocks[i++])\n  }\n\n  while (j <= r) {\n    order.push([null, j, null, null])\n    arr.push(dupBlocks[j++])\n  }\n\n  for (i = l; i <= r; i++) {\n    dupBlocks[i] = arr[i - l]\n    order.push([i, null, dupBlocks.slice(), null])\n  }\n}\n\nconst mergeSortHelper = (dupBlocks, l, r) => {\n  if (l >= r) return\n\n  const mid = Math.floor((l + r) / 2)\n\n  mergeSortHelper(dupBlocks, l, mid)\n  mergeSortHelper(dupBlocks, mid + 1, r)\n\n  merge(dupBlocks, l, mid, r)\n}\n\nconst mergeSort = (blocks) => {\n  order = []\n  const dupBlocks = blocks.slice() // copying blocks array\n\n  mergeSortHelper(dupBlocks, 0, dupBlocks.length - 1)\n\n  for (let i = 0; i < dupBlocks.length; i++) {\n    order.push([null, null, null, i]) // i th element will be in correct position\n  }\n\n  return order\n}\n\nexport default mergeSort\n","let order = []\n\nconst swap = (arr, i, j) => {\n  const temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n}\n\nconst partition = (dupBlocks, l, r) => {\n  const pivot = l\n  let j = l\n\n  for (let i = l + 1; i <= r; i++) {\n    order.push([i, pivot, null, null])\n    if (dupBlocks[i] < dupBlocks[pivot]) {\n      j += 1\n      swap(dupBlocks, i, j)\n      order.push([i, j, dupBlocks.slice(), null])\n    }\n  }\n\n  swap(dupBlocks, pivot, j)\n  order.push([pivot, j, dupBlocks.slice(), null])\n  order.push([null, null, null, j])\n  return j\n}\n\nconst quickSortHelper = (dupBlocks, l, r) => {\n  if (l >= r) {\n    if (l === r) order.push([null, null, null, l])\n    return\n  }\n\n  const pivot = l + Math.floor(Math.random() * (r - l))\n\n  swap(dupBlocks, l, pivot)\n  order.push([l, pivot, dupBlocks.slice(), null])\n\n  const m = partition(dupBlocks, l, r)\n\n  quickSortHelper(dupBlocks, l, m - 1)\n  quickSortHelper(dupBlocks, m + 1, r)\n\n  return\n}\n\nconst quickSort = (blocks) => {\n  const dupBlocks = blocks.slice() // Copying blocks array\n  order = []\n\n  quickSortHelper(dupBlocks, 0, dupBlocks.length - 1)\n\n  return order\n}\n\nexport default quickSort\n","import React, { useState, useEffect } from 'react'\n\nimport Navbar from './components/Navbar'\nimport Bars from './components/Bars'\n\nimport bubbleSort from './algorithms/BubbleSort'\nimport selectionSort from './algorithms/SelectionSort'\nimport insertionSort from './algorithms/InsertionSort'\nimport mergeSort from './algorithms/MergeSort'\nimport quickSort from './algorithms/QuickSort'\n\nfunction App() {\n  // Generating shuffled array of 1 to n\n  const generateRandomArray = (len) => {\n    setCompleted(false)\n    setSorting(false)\n    setSortedIndex([])\n\n    const randomArray = Array.from(Array(len + 1).keys()).slice(1)  // generates an array [1,2,3,......,len]\n\n    // randomly shuffle the array\n    // Took reference from \"https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\"\n\n    for (let i = randomArray.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i - 1)) // Math.random() generates random number bretween 0(inclusive) and 1(exclusive)\n      const temp = randomArray[i]\n\n      randomArray[i] = randomArray[randomIndex]\n      randomArray[randomIndex] = temp\n    }\n\n    setBlocks(randomArray)\n  }\n\n  // States\n  const [algo, setAlgo] = useState('bubbleSort')\n  const [len, setLength] = useState(30)\n  const [blocks, setBlocks] = useState([])\n  const [sorting, setSorting] = useState(false)\n  const [completed, setCompleted] = useState(true)\n  const [speed, setSpeed] = useState(250)\n  const [compare, setCompare] = useState([])\n  const [swap, setSwap] = useState([])\n  const [sortedIndex, setSortedIndex] = useState([])\n\n  // Generating random array every time the length is changed by the user\n  useEffect(() => {\n    generateRandomArray(len)\n  }, [len, algo])\n\n  // setting the selected algorithm\n  const handleAlgo = (event) => {\n    setAlgo(event.target.value)\n  }\n\n  // handling the length of the array\n  const handleLength = (event) => {\n    setLength(Number(event.target.value))\n  }\n\n  // handling the speed of sorting\n  const handleSpeed = (event) => {\n    console.log(event.target.value);\n    setSpeed(Math.ceil(400 / Number(event.target.value)))\n  }\n\n  // Sorting according to the algorithm\n  const handleSort = () => {\n    const sortAccOrder = (order) => {\n      ;(function loop(i) {\n        setTimeout(function () {\n          const [j, k, arr, index] = order[i]\n          setCompare([j, k])\n          setSwap([])\n\n          if (index !== null) {\n            setSortedIndex((prevState) => [...prevState, index])\n          }\n\n          if (arr) {\n            setBlocks(arr)\n            if (j !== null || k != null) setSwap([j, k])\n          }\n\n          if (++i < order.length) {\n            loop(i)\n          } else {\n            setSorting(false)\n            setCompleted(true)\n          }\n        }, speed)\n      })(0)\n    }\n\n    setSorting(true)\n\n    algo === 'bubbleSort'\n      ? sortAccOrder(bubbleSort(blocks))\n      : algo === 'selectionSort'\n      ? sortAccOrder(insertionSort(blocks))\n      : algo === 'insertionSort'\n      ? sortAccOrder(selectionSort(blocks))\n      : algo === 'mergeSort'\n      ? sortAccOrder(mergeSort(blocks))\n      : algo === 'quickSort'\n      ? sortAccOrder(quickSort(blocks))\n      : (() => {\n          setSorting(false)\n          setCompleted(true)\n        })()\n  }\n\n  return (\n    <div className='App'>\n      <Navbar\n        generateRandomArray={() => generateRandomArray(len)}\n        handleLength={handleLength}\n        handleSpeed={handleSpeed}\n        handleAlgo={handleAlgo}\n        handleSort={handleSort}\n        sorting={sorting}\n        completed={completed}\n        len={len}\n        speed={speed}\n        algo={algo}\n      />\n\n      <Bars\n        blocks={blocks}\n        compare={sorting && compare}\n        swap={sorting && swap}\n        sorted={sortedIndex}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}